
#include "pch.h"
#include <iostream>
#include <vector>
#include <map>
using namespace std;
void wypisz(int a)
{
	cout << a;
}
void wypisz2(vector<int>tab)
{
	for (int i = 0; i < tab.size(); i++)
	{
		cout << tab[i] << ", ";
	}
}
void wypisz3(vector<vector<int>>zliczone)
{
	for (int i = 0; i < zliczone.size(); i++)
	{
		for (int j = 0; j < zliczone[i].size(); j++)
		{
			cout << zliczone[i][j] << " ";
		}
		cout << endl;
	}
}
bool czynalezy(vector<int>tab, int a)
{
	for (int i = 0; i < tab.size(); i++)
	{
		if (tab[i] == a)
		{
			return true;
		}
	}
	return false;
}
bool czyzawiera(vector<int>tab, vector<int>tab2)
{
	for (int i = 0; i < tab2.size(); i++)
	{
		if (!czynalezy(tab, tab2[i]))
		{
			return false;
		}
	}
	return true;
}
vector<int>unikalnosc(vector<int>tab)
{
	vector<int>unikalny;
		for (int i = 0; i < tab.size(); i++)
		{
			if (!czynalezy(unikalny, tab[i]))
			{
				unikalny.push_back(tab[i]);
			}
		}
	return unikalny;
}
vector<vector<int>>czestosc(vector<int>tab)
{
	vector<vector<int>>wynik;
	vector<int>u = unikalnosc(tab);
	vector<int>c;
	for (int i = 0; i < u.size(); i++)
	{
		int licznik = 0;
			for (int j = 0; j < tab.size(); j++)
			{
				if (u[i] == tab[j])
				{
					licznik++;
				}
				
			}
		c.push_back(licznik);
	}
	wynik.push_back(u);
	wynik.push_back(c);
	return wynik;
}
int max(vector<int>tab)
{
	int max = tab[0];
	for (int i = 0; i < tab.size(); i++)
	{
		if (tab[i] > max)
		{
			max = tab[i];
		}
	}
	return max;
}
int min(vector<int>tab)
{
	int min = tab[0];
	for (int i = 0; i < tab.size(); i++)
	{
		if (tab[i] < min)
		{
			min = tab[i];
		}
	}
	return min;
}
bool czynalezyklucz(map<int, int>m, int klucz)
{
	for (auto item : m)
	{
		if (item.first == klucz)
		{
			return true;
		}
	}
	return false;
}
map<int, int>czestosc(vector<int>tab)
{
	map<int, int>wynik;
	for (int i = 0; i < tab.size(); i++)
	{
		if (!czynalezyklucz(wynik, tab[i]))
		{
			wynik.insert({tab[i],1})
		}
		else
		{
			wynik[tab[i]]++;

		}
	}
	return wynik;
}
int main()
{
	int a = 3;
	wypisz(a);
	vector<int>tab = { 1,2,3,4,1,2,3,4,1,1,1,4,1,2};
	vector<int>tab2 = { 3,4,1,4,1,4 };
	wypisz2(tab);
	cout << endl;
	wypisz(max(tab));
	cout << endl;
	wypisz(min(tab));
	cout << endl;
	czynalezy(tab, a); 
	cout << endl;
	czyzawiera(tab, tab2);
	cout << endl;
	wypisz2(unikalnosc(tab));
	cout << endl;
	wypisz3(czestosc(tab));
	cout << endl;

}
